import 'dart:ui';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:emindmatterssystem/screens/mood/pages/ViewMoodLogsPage.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:intl/intl.dart';
import '../../../utils/constant.dart';
import '../data/MoodEmojisModel.dart';
import '../data/MoodEntriesModel.dart';

class AddNewMoodPage extends StatefulWidget {
  final Function(MoodEmojisModel) onMoodSelected;

  AddNewMoodPage({Key? key, required this.onMoodSelected,}) : super(key: key);

  @override
  _AddNewMoodPageState createState() => _AddNewMoodPageState();
}

class _AddNewMoodPageState extends State<AddNewMoodPage> {
  DateTime _selectedDateTime = DateTime.now();
  MoodEmojisModel? selectedMood;
  TextEditingController _notesController = TextEditingController();
  final FirebaseFirestore _db = FirebaseFirestore.instance;
  bool _isNotesValid = true;

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    _notesController.dispose();
    super.dispose();
  }

  void _validateNotes(String value) {
    setState(() {
      _isNotesValid = value.length <= 135;
    });
  }

  Future<void> _saveMood() async {
    try {
      User? currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) {
        _showErrorMessage('User is not authenticated.');
        return;
      }

      if (!_isNotesValid) {
        Fluttertoast.showToast(
          msg: 'Notes can only 135 characters.',
          gravity: ToastGravity.BOTTOM,
        );
        return;
      }

      // Ensure a mood has been selected
      if (selectedMood == null) {
        _showErrorMessage('Please select a mood.');
        return;
      }

      // Create a mood entry without setting moodEntryID yet
      MoodEntryModel moodEntry = MoodEntryModel(
        moodEntryID: '',
        userID: currentUser.uid,
        moodDateTime: _selectedDateTime,
        moodTypeName: selectedMood!.emojiName,
        notes: _notesController.text.trim(),
      );

      // Add to Firestore and let it generate a unique ID
      DocumentReference docRef = await _db.collection('moods').add(moodEntry.toMap());

      // Update the moodEntryID with the ID generated by Firestore
      moodEntry = moodEntry.copyWith(moodEntryID: docRef.id);

      // Optionally, update the document in Firestore with the new ID if needed
      await docRef.update({'moodEntryID': docRef.id});

      _showSuccessMessage('Mood added successfully.');
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => ViewMoodLogsPage()),
      );
    } catch (e) {
      Navigator.pop(context); // Close the loading dialog if there's an error
      _showErrorMessage('Failed to save mood: $e');
    }
  }

  void _navigateToMoodTrackingPage() {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => ViewMoodLogsPage()),
    );
  }

  void _showSuccessMessage(String message) {
    final snackBar = SnackBar(
      content: Text(message),
      backgroundColor: Colors.green,
    );
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  void _showErrorMessage(String message) {
    final snackBar = SnackBar(
      content: Text(message),
      backgroundColor: Colors.red,
    );
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  void _selectDateTime(BuildContext context) async {
    DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: _selectedDateTime,
      firstDate: DateTime(2000), // Set an appropriate start date
      lastDate: DateTime(2100),  // Set an appropriate end date
    );

    if (pickedDate != null) {
      TimeOfDay? pickedTime = await showTimePicker(
        context: context,
        initialTime: TimeOfDay.fromDateTime(_selectedDateTime),
      );

      if (pickedTime != null) {
        DateTime pickedDateTime = DateTime(
          pickedDate.year,
          pickedDate.month,
          pickedDate.day,
          pickedTime.hour,
          pickedTime.minute,
        );

        setState(() {
          _selectedDateTime = pickedDateTime;
        });
      }
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
         child: Stack(
           alignment: Alignment.bottomCenter,
           children: [
             IgnorePointer(
               ignoring: true, // Set this to true to ignore pointer events
               child: ViewMoodLogsPage(),
             ),
             BackdropFilter(
               filter: ImageFilter.blur(sigmaX: 5.0, sigmaY: 5.0), // Adjust sigmaX and sigmaY for desired blur intensity
               child: Container(
                 color: Colors.transparent, // This ensures the container is transparent
               ),
             ),
             Padding(
               padding: const EdgeInsets.only(top: 16.0),
               child: Container(
                 width: MediaQuery.of(context).size.width,
                 decoration: BoxDecoration(
                   boxShadow: const [
                     BoxShadow(
                       color: Colors.purple,
                       blurRadius: 10,
                     ),
                   ],
                   color: Colors.purple.shade50,
                   borderRadius: const BorderRadius.only(
                     topLeft: Radius.circular(
                       35.0,
                     ),
                     topRight: Radius.circular(
                       35.0,
                     ),
                   ),
                 ),
                 child: SingleChildScrollView(
                   padding: EdgeInsets.all(16),
                   child: Column(
                     children: [
                       Row(
                         mainAxisAlignment: MainAxisAlignment.spaceAround,
                         children: [
                           TextButton.icon(
                             onPressed: () => _selectDateTime(context),
                             icon: const Icon(Icons.calendar_month_outlined),
                             style: ButtonStyle(
                               padding: MaterialStateProperty.all<EdgeInsets>(
                                 EdgeInsets.symmetric(vertical: 12.0, horizontal: 20.0), // Adjust padding as needed
                               ),
                             ),
                             label: Row(
                               mainAxisSize: MainAxisSize.min,
                               children: [
                                 Text(
                                   DateFormat('dd/MM/yyyy hh:mm a').format(_selectedDateTime),
                                   style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold), // Increase font size
                                 ),
                                 const Icon(Icons.arrow_drop_down),
                               ],
                             ),
                           ),
                         ],
                       ),
                       SizedBox(height: 10),
                       FittedBox(
                         child: Row(
                           mainAxisAlignment: MainAxisAlignment.center,
                           children: MoodEmojisModel.allMoods.map(
                                 (mood) => GestureDetector(
                               onTap: () {
                                 setState(() {
                                   selectedMood = mood;
                                 });
                                 widget.onMoodSelected(mood);
                               },
                               child: MoodOption(
                                 moodEmoji: mood,
                                 isSelected: selectedMood?.emojiName == mood.emojiName,
                                 onTap: () {
                                   // This ensures that the onTap event is passed down to MoodOption
                                   setState(() {
                                     selectedMood = mood;
                                   });
                                   widget.onMoodSelected(mood);
                                 },
                               ),
                             ),
                           ).toList(),
                         ),
                       ),
                       SizedBox(height: 10),
                       TextField(
                         controller: _notesController,
                         decoration: InputDecoration(
                           border: OutlineInputBorder(
                             borderRadius: BorderRadius.circular(10),
                           ),
                           hintText: "Add a notes",
                           errorText: _isNotesValid ? null : 'Notes can only 135 character of words',
                         ),
                         maxLines: null,
                         onChanged: (value) => _validateNotes(value),
                       ),
                       SizedBox(height: 15),
                       Row(
                         mainAxisAlignment: MainAxisAlignment.end,
                         children: [
                           Padding(
                             padding: const EdgeInsets.symmetric(horizontal: 8.0), // Add padding here
                             child: ElevatedButton(
                               onPressed: () {
                                 _navigateToMoodTrackingPage();
                               },
                               child: const Text(
                                 "Cancel",
                                 style: TextStyle(
                                   color: Colors.white,
                                   fontWeight: FontWeight.bold,
                                 ),
                               ),
                               style: ElevatedButton.styleFrom(
                                 backgroundColor: pShadeColor4,
                               ),
                             ),
                           ),
                           Padding(
                             padding: const EdgeInsets.symmetric(horizontal: 8.0), // Add padding here
                             child: ElevatedButton(
                               onPressed: () {
                                 _saveMood();
                               },
                               child: const Text(
                                 "Save",
                                 style: TextStyle(
                                   color: Colors.white,
                                   fontWeight: FontWeight.bold,
                                 ),
                               ),
                               style: ElevatedButton.styleFrom(
                                 backgroundColor: pShadeColor4,
                               ),
                             ),
                           ),
                         ],
                       )
                     ],
                   ),
                 ),
               ),
             ),
           ],
         ),
      ),
    );
  }
}

class MoodOption extends StatefulWidget {
  final MoodEmojisModel moodEmoji;
  final bool isSelected;
  final Function() onTap;

  MoodOption({required this.moodEmoji, required this.isSelected, required this.onTap});

  @override
  _MoodOptionState createState() => _MoodOptionState();
}

class _MoodOptionState extends State<MoodOption> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 150),
    );
    _scaleAnimation = Tween<double>(begin: 1.0, end: 1.1).animate(_controller)
      ..addListener(() {
        setState(() {});
      });

    // Reset scale when the animation completes
    _controller.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        _controller.reverse();
      }
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTapDown: (_) {
        _controller.forward();
      },
      onTapUp: (_) {
        _controller.reverse();
      },
      onTapCancel: () {
        _controller.reverse();
      },
      onTap: widget.onTap,
      child: Transform.scale(
        scale: widget.isSelected ? _scaleAnimation.value : 1.0,
        child: Container(
          margin: EdgeInsets.all(12.0),
          padding: EdgeInsets.all(20.0),  // Increased padding for more space inside the container
          decoration: BoxDecoration(
            shape: BoxShape.circle,  // Use BoxShape.circle for a circular container
            color: widget.isSelected ? widget.moodEmoji.emojiColor.withOpacity(0.8) : widget.moodEmoji.emojiColor,
            boxShadow: [
              BoxShadow(
                color: Colors.white.withOpacity(0.4),
                spreadRadius: 3,  // Increased spread radius
                blurRadius: 7,   // Increased blur radius
                offset: Offset(0, 4),  // Adjusted offset
              ),
            ],
          ),
          child: Text(
            widget.moodEmoji.emoji,
            style: TextStyle(fontSize: 90.0, fontWeight: FontWeight.bold, color: Colors.white),
          ),
        ),
      ),
    );
  }
}